<?php
/**
 * Created on Jul 3, 2007
 * 
 * @author     Wayne Duran
 */

require_once realpath(dirname(__FILE__). '/../../config.php');

/*
class Asar_ViewTest_TestHelper {
	public static function upperCase($str) {
		return strtoupper($str);
	}
}

class Asar_ViewTest_TestHelper2 {
	public static function lowerCase($str) {
		return strtolower($str);
	}
}
*/

/**
 * Test class for Template.
 * Generated by PHPUnit_Util_Skeleton on 2007-07-02 at 01:03:33.
 */
class Asar_ViewTest extends Asar_Test_Helper {
    
    private static $template_path;
	private static $template_name = 'inc.php';
	private static $template_contents = '
<h2>This is in included template</h2>
<p><?= $var ?></p>
<p><strong><?= $this->var2 ?></strong></p>
';

    protected function setUp() {
    	$this->T = new Asar_View;
		self::newFile(self::$template_name,self::$template_contents);
		self::$template_path = self::getPath(self::$template_name);
    }

    protected function tearDown() {
    	$this->T = null;
    	//Asar::clearDebugMessages();
    }
    
    public function testReturnsNullWhenMissingTemplateUsed() {
		$this->setExpectedException('Asar_View_Exception');    	
		$haystack = $this->T->fetch('NonexistentTemplateFile');
    	$this->assertEquals(null, $haystack, 'Template did not return null when including non-existentTemplateFile');
    }
	
    public function testSettingVariables() {
    	$this->T->set('var', 'Testing');
    	$this->T->set('var2', 'TestingAgain');
    	
    	$haystack = $this->T->fetch(self::$template_path);
    	
    	$this->assertContains('<p>Testing</p>', $haystack, 'Unable to set variable for file');
    	$this->assertContains('<p><strong>TestingAgain</strong></p>', $haystack, 'Unable to set variable for file');
    }
    
    public function testMultiSetVariables() {
    	$this->T->setVars(array('var' => 'Testing',
					            'var2'=> 'TestingAgain'));
		
    	$haystack = $this->T->fetch(self::$template_path);
    	
    	$this->assertContains('<p>Testing</p>', $haystack, 'Unable to set variable for file');
    	$this->assertContains('<p><strong>TestingAgain</strong></p>', $haystack, 'Unable to set variable for file');
    }
	
	public function testMultiSetVariablesUsingSetOnly() {
    	$this->T->set(array('var' => 'Nesting',
					        'var2'=> 'NestingAgain'));
		
    	$haystack = $this->T->fetch(self::$template_path);
    	
    	$this->assertContains('<p>Nesting</p>', $haystack, 'Unable to set variable for file');
    	$this->assertContains('<p><strong>NestingAgain</strong></p>', $haystack, 'Unable to set variable for file');
    }
    
    public function testGettingVariablesSet() {
        $variables = array('var' => 'Yo', 'var2' => 'Peace.');
        $this->T->setVars($variables);
        $this->assertEquals($variables, $this->T->getVars());
    }
    
    
    public function test__ToString() {
    	$ver = explode( '.', phpversion() );
		$ver_num = $ver[0] . $ver[1] . $ver[2];
    	if ($ver_num < 520) {
    		$this->markTestSkipped(
              'This test will only run correctly in PHP versions not less than 5.2.x'
            );
    	}
    	
    	$this->T->set('var','Testing');
		$this->T->set('var2', 'TestingAgain');
    	$this->T->setTemplate(self::$template_path);
    	$this->assertContains('<p>Testing</p>', $this->T.'', 'Unable to set variable for file');
    	$this->assertContains('<p><strong>TestingAgain</strong></p>', $this->T.'', 'Unable to set variable for file');
    	
    }
    
    public function testEcho__ToString() {
    	
    	$this->T->set('var','One');
		$this->T->set('var2', 'Two');
    	$this->T->setTemplate(self::$template_path);
		ob_start();
			echo $this->T;
		$haystack = ob_get_contents();
		ob_end_clean();
    	$this->assertContains('<p>One</p>', $haystack, 'Unable to set variable for file');
    	$this->assertContains('<p><strong>Two</strong></p>', $haystack, 'Unable to set variable for file');
    	
    }
    
    public function testUninitializedVariables() {
    	$testr = 'And If This Ain\'t Love, Why Does it Feel So Good?';
    	
    	$this->T->set('var', $testr);
    	
    	$haystack = $this->T->fetch(self::$template_path);
    	
    	$this->assertContains('<p>'.$testr.'</p>', $haystack, 'Unable to set variable for file');
    	$this->assertContains('<p><strong></strong></p>', $haystack, 'Unable to set an empty string to an unitialized variable for file');
    }
	
	function testGettingTemplateThatWasSet()
	{
		$this->T->setTemplate('yo.html');
		$this->assertEquals('yo.html', $this->T->getTemplate(), 'Unable to get the template set using setTemplate()');
	}
	
	public function testRaiseExceptionWhenTemplateFileIsNotFound()
	{
		$file = 'a_non_existent_template_file.html';
		$this->T->setTemplate($file);
		try {
			$this->T->fetch();
			$this->fail('Asar_View did not raise an exception for unreachable files');
		} catch (Exception $e) {
			$this->assertEquals(
				'Asar_View_Exception_FileNotFound', get_class($e),
				'Asar_View did not raise the right exception for setting an invalid file name.'
			);
			$this->assertEquals(
				"Asar_View::fetch failed. Unable to find the template file '$file'.",
				$e->getMessage(),
				'Asar_View did not set the correct exception message for setting an invalid file name.'
			);
		}
	}
	
	
	/*
	TODO: move this out of the class
	function testTemplateClassLogsIncludedTemplateFilesWhenInDevelopmentMode() {
        Asar::setMode(Asar::MODE_DEVELOPMENT);
        $this->T['var'] = 'testing';
        $this->T->fetch(self::$template_path);
        $debug_messages = Asar::getDebugMessages();
        $this->assertTrue(array_key_exists('Templates', $debug_messages), "Unable to find 'Templates' title on debug messages");
        $this->assertContains(self::$template_path, $debug_messages['Templates'][0], 'Did not find the template file location on Templates debug message');
	}
	
	function testTemplateClassLogsMultipleIncludedTemplateFilesInDevelopmentMode() {
        Asar::setMode(Asar::MODE_DEVELOPMENT);
        
        $old_include_path = get_include_path();
        set_include_path($old_include_path . PATH_SEPARATOR . dirname(self::$template_path));
        
        $this->T['var'] = 'testing';
        $this->T->fetch(self::$template_name);
        $tpl = new Asar_View();
        self::newFile('inc2.php', 'nothing but net');
        $tpl->fetch('inc2.php');
        
        $debug_messages = Asar::getDebugMessages();
        $this->assertTrue(array_key_exists('Templates', $debug_messages), "Unable to find 'Templates' title on debug messages");
        $this->assertContains(self::$template_name, $debug_messages['Templates'][0], 'Did not find the template file on Templates debug message');
        $this->assertContains('inc2.php', $debug_messages['Templates'][1], 'Did not find the second template file on Templates debug message');
        
        set_include_path($old_include_path);
	}
	
	function testTemplateClassLogsIncludedTemplateFilesFullPathWhenInDevelopmentMode() {
	    Asar::setMode(Asar::MODE_DEVELOPMENT);
        
        $old_include_path = get_include_path();
        set_include_path($old_include_path . PATH_SEPARATOR . dirname(self::$template_path));
        
        $this->T['var'] = 'testing';
        $this->T->fetch(self::$template_name);
        $tpl = new Asar_View();
        self::newFile('inc2.php', 'nothing but net');
        $tpl->fetch('inc2.php');
        
        $debug_messages = Asar::getDebugMessages();
        $this->assertTrue(array_key_exists('Templates', $debug_messages), "Unable to find 'Templates' title on debug messages");
        $this->assertEquals(realpath(self::getPath(self::$template_name)), $debug_messages['Templates'][0], 'Did not find the template file on Templates debug message');
        $this->assertEquals(realpath(self::getPath('inc2.php')), $debug_messages['Templates'][1], 'Did not find the second template file on Templates debug message');
        
        set_include_path($old_include_path);
    }
	*/
}
