<?php
/**
 * Created on Jul 3, 2007
 * 
 * @author     Wayne Duran
 */

require_once "PHPUnit/Framework/TestCase.php";
require_once "PHPUnit/Framework/TestSuite.php";

require_once ('Asar.php');

/* Template Main */
class T {
	public static $main_template_contents;
	public static $included_template_contents;
	public static $main_template_name;
	public static $included_tempalate_name;
	
}

T::$main_template_name = 'temp/main.php';
T::$main_template_contents = '
	<html>
	<head>
	<title>This is the Title</title>
	</head>
	<body>
	<h1>Main Template Here</h1>
	<?=$contents ?>
	</body>
	</html>' ;

T::$included_tempalate_name = 'temp/inc.php';
T::$included_template_contents = '
	<h2>This is in included template</h2>
	<p><?= $var ?></p>
	<p><strong><?= $this[\'var2\'] ?></strong></p>
	';



class Asar_TemplateTest_TestHelper {
	public static function upperCase($str) {
		return strtoupper($str);
	}
}

class Asar_TemplateTest_TestHelper2 {
	public static function lowerCase($str) {
		return strtolower($str);
	}
}


/**
 * Test class for Template.
 * Generated by PHPUnit_Util_Skeleton on 2007-07-02 at 01:03:33.
 */
class Asar_TemplateTest extends PHPUnit_Framework_TestCase {

    protected $cleanUpList = array();
    
    
    
    public static function main() {
        require_once "PHPUnit/TextUI/TestRunner.php";

        $suite  = new PHPUnit_Framework_TestSuite("TemplateTest");
        $result = PHPUnit_TextUI_TestRunner::run($suite);
    }

    protected function setUp() {
    	$this->T = new Asar_Template;
    	
    	if (!file_exists('temp')) {
    		mkdir('temp');	
    	} else {
    		// Empty temp
    		$dir = opendir('temp');
    		while($file = readdir($dir)) {
    			if ($file !== '.' && $file !== '..') @ unlink('temp/'.$file);
    		} 
    	}
    	
    	// Create Test Template Files
    	$this->tpl_main = $this->createTestFile(T::$main_template_name,T::$main_template_contents);
		
		$this->tpl_inc = $this->createTestFile(T::$included_tempalate_name,T::$included_template_contents);
		
    }

    protected function tearDown() {
    	$this->T = NULL;
    	
    	foreach($this->cleanUpList as $f) {
    		$f->delete();
    	}
    	
    	@ rmdir('temp');
    	Asar_Template::clearHelperRegistry();
    }
    
    protected function hasString($haystack, $needle) {
    	if(strpos($haystack, $needle) > 0) {
    		return true;
    	} else {
    		return false;
    	}
    }
    
    protected function stringInBetween($needle, $haystack, $prefix = '', $suffix = '') {
    	//return preg_match
    }
    
    protected function createTestFile($name, $content) {
		$f = Asar_File::create($name)
					->write($content)
					->save();
		$this->cleanUpList[] = $f;
		return $f;
    }
    
    /**
     * @todo: Create test to check if 'short tags' are enabled
     */    
    public function testAlternativeSettingTemplateToUse() {
    	$this->T->setTemplate(T::$included_tempalate_name);
    	$this->T->set('var', 'Testing');
    	$this->T->set('var2', 'TestingAgain');
    	
    	$haystack = $this->T->fetch();
    	$this->assertTrue($this->hasString($haystack, '<p>Testing</p>'), 'Unable to set variable for file'.$haystack);
    	$this->assertTrue($this->hasString($haystack, '<p><strong>TestingAgain</strong></p>'), 'Unable to set variable for file');
    }
     
    public function testThrowingErrorWhenMissingTemplateUsed() {
    	$this->setExpectedException('Asar_Template_Exception');
    	$this->T->fetch('NonexistentTemplateFile');
    	//$this->assertTrue($e instanceof Asar_Template_Exception, 'Exception thrown is not an Asar_Template_Exception');
    	$this->assertTrue($this->hasString($e->getMessage(), 'NonexistingTemplateFile'), 'Asar_Template_Exception does not properly indicate which template it tried to include');
    }
    
    public function testReturnsNullWhenMissingTemplateUsed() {
		$this->setExpectedException('Asar_Template_Exception');    	
		$haystack = $this->T->fetch('NonexistentTemplateFile');
    	$this->assertEquals(null, $haystack, 'Template did not return null when including non-existentTemplateFile');
    }

    public function testSettingVariables() {
    	$this->T->set('var', 'Testing');
    	$this->T->set('var2', 'TestingAgain');
    	
    	$haystack = $this->T->fetch(T::$included_tempalate_name);
    	
    	$this->assertTrue($this->hasString($haystack, '<p>Testing</p>'), 'Unable to set variable for file');
    	$this->assertTrue($this->hasString($haystack, '<p><strong>TestingAgain</strong></p>'), 'Unable to set variable for file');
    }
    
    public function testMultiSetVariables() {
    	$this->T->setVars(array('var' => 'Testing',
					            'var2'=> 'TestingAgain'));
		
    	$haystack = $this->T->fetch(T::$included_tempalate_name);
    	
    	$this->assertTrue($this->hasString($haystack, '<p>Testing</p>'), 'Unable to set variable for file');
    	$this->assertTrue($this->hasString($haystack, '<p><strong>TestingAgain</strong></p>'), 'Unable to set variable for file');
    }
    
    public function testArrayTypeSettingAndGetting() {
    	$this->T['var'] = 'Testing';
		$this->T['var2'] = 'TestingAgain';
		
    	$haystack = $this->T->fetch(T::$included_tempalate_name);
    	
    	$this->assertTrue($this->hasString($haystack, '<p>Testing</p>'), 'Unable to set variable for file');
    	$this->assertTrue($this->hasString($haystack, '<p><strong>TestingAgain</strong></p>'), 'Unable to set variable for file');
    	
    	$this->assertEquals('Testing', $this->T['var'], 'Unexpected value for template variable');
    	$this->assertEquals('TestingAgain', $this->T['var2'], 'Unexpected value for template variable');
    }
    
    public function test__ToString() {
    	
    	$ver = explode( '.', phpversion() );

		$ver_num = $ver[0] . $ver[1] . $ver[2];
    	if ($ver_num < 520) {
    		$this->markTestSkipped(
              'This test will only run correctly in PHP versions not less than 5.2.x'
            );
    	}
    	
    	
    	$this->T['var'] = 'Testing';
		$this->T['var2'] = 'TestingAgain';
    	$this->T->setTemplate(T::$included_tempalate_name);
    	$this->assertTrue($this->hasString($this->T, '<p>Testing</p>'), 'Unable to set variable for file');
    	$this->assertTrue($this->hasString($this->T, '<p><strong>TestingAgain</strong></p>'), 'Unable to set variable for file');
    	
    }
    
    public function testEcho__ToString() {
    	
    	$this->T['var'] = 'Testing';
		$this->T['var2'] = 'TestingAgain';
    	$this->T->setTemplate(T::$included_tempalate_name);
		ob_start();
			echo $this->T;
		$haystack = ob_get_contents();
		ob_end_clean();
    	$this->assertTrue($this->hasString($haystack, '<p>Testing</p>'), 'Unable to set variable for file');
    	$this->assertTrue($this->hasString($haystack, '<p><strong>TestingAgain</strong></p>'), 'Unable to set variable for file');
    	
    }
    
    public function testUninitializedVariables() {
    	
    	$testr = 'And If This Ain\'t Love, Why Does it Feel So Good?';
    	
    	$this->T['var'] = $testr;
    	
    	$haystack = $this->T->fetch(T::$included_tempalate_name);
    	
    	$this->assertTrue($this->hasString($haystack, '<p>'.$testr.'</p>'), 'Unable to set variable for file');
    	$this->assertTrue($this->hasString($haystack, '<p><strong></strong></p>'), 'Unable to set an empty string to an unitialized variable for file');
    	
    }
    
    public function testRegisterHelper() {
    	Asar_Template::registerHelper('Asar_TemplateTest_TestHelper');
    	
    	$testf = 'temp/regtest.php';
    	$testf_content = '<h4><?= $this->upperCase($psst) ?></h4>';
    	$this->createTestFile($testf, $testf_content);
    	
    	$teststring = 'Karasa';
    	
    	$this->T['psst'] = $teststring;
    	$this->assertEquals('<h4>'.strtoupper($teststring).'</h4>', $this->T->fetch($testf), 'Unable to invoke the registered helper method');
    }
    
    
	/**
	 * Test for calling unregistered Method
	 * 
	 * @todo How to get the message from exception
	 */
	public function testCallingUnregisteredMethod() {
		$testf = 'temp/regtest.php';
		$testf_content = '<h4><?= $this->upperCase($psst) ?></h4>';
		$this->createTestFile($testf, $testf_content);
		$teststring = 'Karasa';
		
		$this->T['psst'] = $teststring;
		
		$this->setExpectedException('Asar_Template_Exception');
		ob_start();
		$b = $this->T->fetch($testf);
		ob_end_clean();
		
	}
    
    public function testRegisterManyHelpers() {
    	Asar_Template::registerHelper('Asar_TemplateTest_TestHelper');
    	Asar_Template::registerHelper('Asar_TemplateTest_TestHelper2');
    	
    	$testf = 'temp/regtest.php';
    	$testf_content = '<h4><?= $this->upperCase($psst) ?></h4><p><?= $this->lowerCase($psst)?></p>';
    	$this->createTestFile($testf, $testf_content);
    	
    	$teststring = 'Karasa';
    	
    	$this->T['psst'] = $teststring;
    	$this->assertEquals('<h4>'.strtoupper($teststring).'</h4><p>'.strtolower($teststring).'</p>', $this->T->fetch($testf), 'Unable to invoke the registered helper method');
    }
	/*
	public function testCreatingDefaultTemplateVariables() {
		
	}*/
	
	
	
	
	
}
?>
