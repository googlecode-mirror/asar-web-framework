NEXT:
- Make Asar_Application use App_Config. Remove setting response default headers
  from Asar_Resource to Asar_Application.
ALL:
- Cascading Configurations: 
  - We have default configurations created by the framework
  - Each app can override these configurations
  - Resources can override these too
- Do away with inheritance. Resource can be dumbbed-down and need only implement
  GET, POST, PUT, DELETE as necessary and just a required __construct interface
  where all the dependency needed is passed. The HTTP methods need only return
  something interesting.
- Make sure we're using the right Content-Language header (See Asar_Application)
  and using 'en';
- Filters need only implement the Asar_Resource_Interface
- For Router, only one kind of word separator (e.g. '_' in 'the_quick_brown').
  This will prevent multiple URLs pointing to the same resource.
  - Users can override this through configuration.
- When Resources need to use a representation of another Resource, they can use
  it through $this->useRepresentationFor('NameOfOwnerRepresentation');
- Better dependency injection
  - Phemto? http://phemto.sourceforge.net/quick-start.php
  - Pimple? http://github.com/fabpot/Pimple
- Refactor Configuration system
  - Rethink this:
    $this->config_bag = new Asar_Config();
    $this->setUp();
    $this->config_bag->importConfig(new Asar_Config($this->config));